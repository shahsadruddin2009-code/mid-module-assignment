#!/bin/bash
# 🛡️ Security Scanning Script for GitHub Actions
# Comprehensive security analysis of the Flask application

set -e

echo "🛡️ Running security scans for Online Bookstore Flask App"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() { echo -e "${BLUE}[INFO]${NC} $1"; }
print_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Create security results directory
mkdir -p security-results

# Security scan configuration
BANDIT_CONFIG_FILE=".bandit"
SAFETY_OUTPUT="security-results/safety-report.json"
BANDIT_OUTPUT="security-results/bandit-report.json"

print_status "Starting security scans..."

# 1. Bandit - Python AST security scanner
print_status "Running Bandit security scanner..."
bandit -r . -f json -o ${BANDIT_OUTPUT} || {
    print_warning "Bandit found security issues, check report for details"
}

# Generate human-readable Bandit report
bandit -r . -f txt > security-results/bandit-report.txt || {
    print_warning "Bandit text report generated with warnings"
}

print_success "Bandit scan completed: ${BANDIT_OUTPUT}"

# 2. Safety - Check for known security vulnerabilities in dependencies
print_status "Running Safety dependency vulnerability scanner..."
safety check --json --output ${SAFETY_OUTPUT} || {
    print_warning "Safety found vulnerable dependencies, check report for details"
}

print_success "Safety scan completed: ${SAFETY_OUTPUT}"

# 3. Check for common security misconfigurations
print_status "Checking for common security misconfigurations..."

# Check for debug mode in production
print_status "Checking for debug mode settings..."
if grep -r "debug.*=.*True" . --include="*.py" 2>/dev/null; then
    print_warning "Found debug=True in code - ensure this is disabled in production"
fi

# Check for hardcoded secrets/passwords
print_status "Scanning for potential hardcoded secrets..."
SECRET_PATTERNS=(
    "password\s*=\s*['\"][^'\"]{3,}['\"]"
    "secret\s*=\s*['\"][^'\"]{10,}['\"]"
    "api_key\s*=\s*['\"][^'\"]{10,}['\"]"
    "token\s*=\s*['\"][^'\"]{10,}['\"]"
)

HARDCODED_SECRETS_FOUND=false
for pattern in "${SECRET_PATTERNS[@]}"; do
    if grep -rE "$pattern" . --include="*.py" 2>/dev/null; then
        HARDCODED_SECRETS_FOUND=true
        print_warning "Potential hardcoded secret found matching pattern: $pattern"
    fi
done

if [ "$HARDCODED_SECRETS_FOUND" = false ]; then
    print_success "No obvious hardcoded secrets detected"
fi

# Check for Flask security headers
print_status "Checking Flask security configurations..."
if ! grep -r "CSP\|Content-Security-Policy\|X-Frame-Options" . --include="*.py" 2>/dev/null; then
    print_warning "Consider implementing security headers (CSP, X-Frame-Options, etc.)"
fi

# 4. Generate comprehensive security report
print_status "Generating security summary report..."
cat > security-results/security-summary.md << EOF
# 🛡️ Security Scan Results

## Scan Overview
- **Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
- **Repository:** Online Bookstore Flask Application
- **Scanned by:** GitHub Actions Security Pipeline

## Security Tools Used

### 🔍 Bandit - Python AST Security Scanner
- **Report:** [bandit-report.json](bandit-report.json)
- **Text Report:** [bandit-report.txt](bandit-report.txt)
- **Description:** Scans Python code for common security issues

### 🔒 Safety - Dependency Vulnerability Scanner  
- **Report:** [safety-report.json](safety-report.json)
- **Description:** Checks dependencies for known security vulnerabilities

### 🛠️ Manual Security Checks
- Debug mode configuration check
- Hardcoded secrets detection
- Flask security headers review

## Recommendations

### High Priority
- [ ] Review any issues found in Bandit report
- [ ] Update vulnerable dependencies identified by Safety
- [ ] Ensure debug mode is disabled in production

### Medium Priority  
- [ ] Implement Content Security Policy (CSP) headers
- [ ] Add X-Frame-Options header for clickjacking protection
- [ ] Consider implementing rate limiting
- [ ] Add input validation and sanitization

### Best Practices
- [ ] Regular dependency updates
- [ ] Environment-based configuration
- [ ] Secure session management
- [ ] HTTPS enforcement in production

## Files Scanned
- Python source files (*.py)
- Configuration files
- Requirements files
- Templates and static files

---
*Generated by GitHub Actions Security Scanner*
EOF

print_success "Security summary generated: security-results/security-summary.md"

# 5. Exit with appropriate code
if [ -f "$BANDIT_OUTPUT" ] && [ -f "$SAFETY_OUTPUT" ]; then
    print_success "All security scans completed! ✅"
    print_status "Review the generated reports in the security-results/ directory"
    
    # Check if critical issues were found
    CRITICAL_ISSUES=$(python3 -c "
import json, sys
try:
    with open('${BANDIT_OUTPUT}', 'r') as f:
        bandit_data = json.load(f)
    
    with open('${SAFETY_OUTPUT}', 'r') as f:
        safety_data = json.load(f)
    
    # Count high/critical severity issues
    critical_count = 0
    if 'results' in bandit_data:
        for result in bandit_data['results']:
            if result.get('issue_severity', '').lower() in ['high', 'critical']:
                critical_count += 1
    
    if isinstance(safety_data, list) and len(safety_data) > 0:
        critical_count += len(safety_data)
    
    print(critical_count)
except:
    print(0)
" 2>/dev/null || echo "0")

    if [ "$CRITICAL_ISSUES" -gt "0" ]; then
        print_warning "Found $CRITICAL_ISSUES critical security issues - review required!"
        exit 1
    else
        print_success "No critical security issues found! ✅"
    fi
else
    print_error "Security scan incomplete - missing report files"
    exit 1
fi