# üöÄ Advanced GitLab CI/CD Pipeline for Online Bookstore Flask App
# 
# Pipeline Stages:
# 1. Code Quality & Linting
# 2. Security Scanning  
# 3. Multi-Version Testing
# 4. Performance Testing
# 5. Container Building
# 6. Staging Deployment
# 7. Production Deployment
# 8. Monitoring & Notifications

image: python:3.11-slim

stages:
  - üîç quality
  - üõ°Ô∏è security
  - üß™ test
  - ‚ö° performance
  - üê≥ build
  - üöÄ deploy-staging
  - üèÜ deploy-production
  - üìä monitor

variables:
  # Python & Pip Configuration
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PYTHONPATH: "$CI_PROJECT_DIR"
  PYTHON_VERSION: "3.11"
  
  # Application Configuration
  APPLICATION_NAME: "online-bookstore-flask"
  APPLICATION_VERSION: "$CI_PIPELINE_ID"
  
  # Docker Configuration
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  IMAGE_NAME: "$CI_REGISTRY_IMAGE"
  IMAGE_TAG: "$CI_COMMIT_SHA"
  
  # Quality Gates
  CODE_COVERAGE_THRESHOLD: "80"
  SECURITY_THRESHOLD: "medium"
  PERFORMANCE_THRESHOLD: "2000"
  
  # Deployment Configuration
  STAGING_URL: "https://staging-bookstore.pythonanywhere.com"
  PRODUCTION_URL: "https://shahsadruddin2009.pythonanywhere.com"

# Cache Configuration for faster builds
cache:
  key: 
    files:
      - requirements.txt
      - requirements-dev.txt
  paths:
    - .cache/pip
    - venv/
    - node_modules/
  policy: pull-push

# Global before_script for common setup
before_script:
  - apt-get update -qq && apt-get install -y -qq git curl
  - python --version
  - pip install --upgrade pip
  - pip install virtualenv

# Test Jobs
.test-template: &test-template
  stage: test
  before_script:
    - python -m pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install pytest-cov flake8 black bandit safety
  artifacts:
    reports:
      junit: TEST-*.xml
      coverage: coverage.xml
    paths:
      - htmlcov/
      - TEST-*.xml
      - coverage.xml
    expire_in: 1 week
    when: always

test-python-3.9:
  <<: *test-template
  image: python:3.9
  script:
    - echo "üß™ Testing with Python 3.9"
    - python --version
    - echo "Running model tests..."
    - python -m pytest test_app_model.py -v --junitxml=TEST-models-py39.xml
    - echo "Running route tests..."
    - python -m pytest test_app_routes.py -v --junitxml=TEST-routes-py39.xml
    - echo "Running category tests..."
    - python -m pytest test_category_edge_cases.py -v --junitxml=TEST-categories-py39.xml
    - echo "Running integration tests..."
    - python -m pytest test_integration.py -v --junitxml=TEST-integration-py39.xml

test-python-3.10:
  <<: *test-template
  image: python:3.10
  script:
    - echo "üß™ Testing with Python 3.10"
    - python --version
    - python -m pytest test_app_model.py test_app_routes.py test_category_edge_cases.py test_integration.py -v --junitxml=TEST-all-py310.xml

test-python-3.11:
  <<: *test-template
  image: python:3.11
  script:
    - echo "üß™ Testing with Python 3.11"
    - python --version
    - echo "Running all test suites..."
    - python -m pytest test_app_model.py -v --junitxml=TEST-models-py311.xml
    - python -m pytest test_app_routes.py -v --junitxml=TEST-routes-py311.xml
    - python -m pytest test_category_edge_cases.py -v --junitxml=TEST-categories-py311.xml
    - python -m pytest test_integration.py -v --junitxml=TEST-integration-py311.xml
    - echo "Running full integration test suite..."
    - python test_integration_full_mid_module.py
    - echo "Generating coverage report..."
    - pytest --cov=. --cov-report=xml --cov-report=html --cov-exclude="test_*" app.py models.py

# Full Integration Test
integration-test-full:
  stage: test
  image: python:3.11
  before_script:
    - pip install -r requirements.txt
  script:
    - echo "üîó Running comprehensive integration tests..."
    - python test_integration_full_mid_module.py
    - echo "‚úÖ All integration tests completed successfully!"
  artifacts:
    when: always
    expire_in: 1 week

# Code Quality
code-quality:
  stage: test
  image: python:3.11
  before_script:
    - pip install flake8 black isort mypy
  script:
    - echo "üîç Running code quality checks..."
    - black --check --diff . || echo "Code formatting issues detected"
    - isort --check-only --diff . || echo "Import sorting issues detected"
    - flake8 . --max-line-length=127 || echo "Linting issues detected"
    - mypy app.py models.py --ignore-missing-imports || echo "Type checking completed"
  allow_failure: true

# Security Scanning
security-scan:
  stage: security
  image: python:3.11
  before_script:
    - pip install bandit safety
  script:
    - echo "üõ°Ô∏è Running security scans for Online Bookstore..."
    - bandit -r . -f json -o bandit-report.json || true
    - bandit -r . || true
    - safety check --json --output safety-report.json || true
    - safety check || true
  artifacts:
    paths:
      - bandit-report.json
      - safety-report.json
    expire_in: 1 week
    when: always

# Container Security
container-security:
  stage: security
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - apk add --no-cache curl
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
  script:
    - echo "üîí Building and scanning Docker image..."
    - docker build -t $APPLICATION_NAME:$CI_COMMIT_SHA .
    - trivy image --format json --output trivy-report.json $APPLICATION_NAME:$CI_COMMIT_SHA || true
    - echo "‚úÖ Container security scan completed"
  artifacts:
    paths:
      - trivy-report.json
    expire_in: 1 week
    when: always

# Build Application
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo "üèóÔ∏è Building Online Bookstore application..."
    - docker build -t $CI_REGISTRY_IMAGE/online-bookstore:$CI_COMMIT_SHA .
    - docker tag $CI_REGISTRY_IMAGE/online-bookstore:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/online-bookstore:latest
    
    - echo "üß™ Testing Docker image..."
    - docker run -d -p 5000:5000 --name test-bookstore $CI_REGISTRY_IMAGE/online-bookstore:$CI_COMMIT_SHA
    - sleep 15
    - curl -f http://localhost:5000/ || exit 1
    - docker stop test-bookstore
    - docker rm test-bookstore
    
    - echo "üì¶ Pushing Docker images..."
    - docker push $CI_REGISTRY_IMAGE/online-bookstore:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/online-bookstore:latest
    - echo "‚úÖ Build completed successfully!"
  only:
    - main
  needs:
    - test-python-3.11
    - security-scan

# Deploy to Staging
deploy-staging:
  stage: deploy-staging
  image: alpine:latest
  before_script:
    - apk add --no-cache curl docker
  script:
    - echo "üöÄ Deploying Online Bookstore to staging environment..."
    - echo "Application: $APPLICATION_NAME"
    - echo "Version: $CI_COMMIT_SHA"
    - echo "Registry: $CI_REGISTRY_IMAGE"
    
    # Add your staging deployment commands here
    # Example with Docker Compose:
    # - docker-compose -f docker-compose.staging.yml down || true
    # - docker-compose -f docker-compose.staging.yml pull
    # - docker-compose -f docker-compose.staging.yml up -d
    
    # Example with Kubernetes:
    # - kubectl set image deployment/bookstore-app bookstore=$CI_REGISTRY_IMAGE/online-bookstore:$CI_COMMIT_SHA
    # - kubectl rollout status deployment/bookstore-app
    
    - echo "‚úÖ Staging deployment completed!"
  environment:
    name: staging
    url: https://staging-bookstore.pythonanywhere.com
  only:
    - main
  needs:
    - build

# Staging Tests
staging-tests:
  stage: deploy-staging
  image: python:3.11
  before_script:
    - pip install requests pytest
  script:
    - echo "üß™ Running tests against staging environment..."
    - echo "Testing staging URL: https://staging-bookstore.yourapp.com"
    
    # Add staging-specific tests here
    # - python -m pytest tests/staging/ --base-url=https://staging-bookstore.yourapp.com -v
    
    - echo "‚úÖ Staging tests completed!"
  needs:
    - deploy-staging
  allow_failure: true

# Deploy to Production
deploy-production:
  stage: deploy-production
  image: alpine:latest
  before_script:
    - apk add --no-cache curl docker
  script:
    - echo "üöÄ Deploying Online Bookstore to production environment..."
    - echo "Application: $APPLICATION_NAME"
    - echo "Version: $CI_COMMIT_SHA"
    - echo "Registry: $CI_REGISTRY_IMAGE"
    
    # Add your production deployment commands here
    # Example with Docker Compose:
    # - docker-compose -f docker-compose.prod.yml down || true
    # - docker-compose -f docker-compose.prod.yml pull
    # - docker-compose -f docker-compose.prod.yml up -d
    
    # Example with Kubernetes:
    # - kubectl set image deployment/bookstore-app bookstore=$CI_REGISTRY_IMAGE/online-bookstore:$CI_COMMIT_SHA
    # - kubectl rollout status deployment/bookstore-app
    
    - echo "üéâ Production deployment completed successfully!"
  environment:
    name: production
    url: https://bookstore.yourapp.com
  only:
    - main
  needs:
    - deploy-staging
    - staging-tests
  when: manual

# Production Health Check
production-health-check:
  stage: deploy-production
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "üè• Running production health checks..."
    - echo "Checking application availability..."
    - sleep 30  # Wait for deployment to stabilize
    
    # Add health check commands
    # - curl -f https://bookstore.yourapp.com/
    # - curl -f https://bookstore.yourapp.com/health
    
    - echo "‚úÖ Production health checks completed!"
  needs:
    - deploy-production
  allow_failure: true

# Create Release
create-release:
  stage: deploy-production
  image: alpine:latest
  before_script:
    - apk add --no-cache curl git
  script:
    - echo "üìã Creating release for Online Bookstore..."
    - echo "Release version: v$CI_PIPELINE_ID"
    - echo "Commit: $CI_COMMIT_SHA"
    - echo "Branch: $CI_COMMIT_REF_NAME"
    
    # Add release creation logic here
    # This could involve calling GitHub/GitLab API to create a release
    
    - echo "‚úÖ Release v$CI_PIPELINE_ID created successfully!"
  needs:
    - production-health-check
  only:
    - main
  when: manual