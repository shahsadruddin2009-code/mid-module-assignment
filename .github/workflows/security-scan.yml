# üõ°Ô∏è Security Scanning Pipeline
# Dedicated pipeline for security analysis and vulnerability detection

name: üîí Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

jobs:
  security-scan:
    name: üîç Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones disabled for better analysis
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety semgrep pip-audit
    
    # Python Security Analysis
    - name: Run Bandit Security Scanner
      run: |
        bandit -r . -f json -o bandit-report.json
        bandit -r . -f txt -o bandit-report.txt
      continue-on-error: true
    
    - name: Python Dependency Vulnerability Check
      run: |
        safety check --json --output safety-report.json
        safety check --output safety-report.txt
      continue-on-error: true
    
    - name: Pip Audit Security Check
      run: |
        pip-audit --format=json --output=pip-audit-report.json
        pip-audit --format=cyclonedx-json --output=pip-audit-sbom.json
      continue-on-error: true
    
    # Static Analysis Security Testing
    - name: Semgrep Security Analysis
      run: |
        semgrep --config=auto --json --output=semgrep-report.json .
        semgrep --config=auto --output=semgrep-report.txt .
      continue-on-error: true
    
    # Docker Security (if Dockerfile exists)
    - name: Docker Security Scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '.'
        format: 'sarif'
        output: 'docker-security-results.sarif'
      continue-on-error: true
    
    # Upload Security Reports
    - name: Upload Security Scan Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          *-report.json
          *-report.txt
          *-results.sarif
          *-sbom.json
        retention-days: 30
    
    # Upload to GitHub Security Tab
    - name: Upload SARIF to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: docker-security-results.sarif
    
    # Security Summary Comment for PRs
    - name: Security Summary Comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          let comment = '## üîí Security Scan Results\n\n';
          
          try {
            // Check if security reports exist and add summary
            const files = ['bandit-report.txt', 'safety-report.txt', 'semgrep-report.txt'];
            for (const file of files) {
              if (fs.existsSync(file)) {
                const content = fs.readFileSync(file, 'utf8');
                comment += `### ${file}\n\`\`\`\n${content.slice(0, 500)}...\n\`\`\`\n\n`;
              }
            }
            
            // Post comment on PR
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not post security summary:', error);
          }
