name: 🚀 Online Bookstore CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:
    inputs:
      deploy_env:
        description: 'Deployment Environment'
        required: false
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Continuous Integration
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov flake8 black bandit safety
    
    - name: Code formatting check with Black
      run: |
        black --check --diff . || echo "Code formatting issues found"
      continue-on-error: true
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: Security check with bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || true
      continue-on-error: true
    
    - name: Check for known security vulnerabilities
      run: |
        safety check || true
      continue-on-error: true
    
    - name: Run unit tests (models)
      run: |
        python -m pytest test_app_model.py -v --junitxml=model-tests.xml
    
    - name: Run route tests
      run: |
        python -m pytest test_app_routes.py -v --junitxml=route-tests.xml
    
    - name: Run category edge case tests
      run: |
        python -m pytest test_category_edge_cases.py -v --junitxml=category-tests.xml
    
    - name: Run integration tests
      run: |
        python -m pytest test_integration.py -v --junitxml=integration-tests.xml
    
    - name: Run full integration test suite
      run: |
        python test_integration_full_mid_module.py
    
    - name: Generate coverage report
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html test_*.py
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-python-${{ matrix.python-version }}
        path: |
          *-tests.xml
          htmlcov/
          coverage.xml
          bandit-report.json

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Build and Package
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Build Docker image
      run: |
        docker build -t online-bookstore:${{ github.sha }} .
        docker tag online-bookstore:${{ github.sha }} online-bookstore:latest
    
    - name: Test Docker image
      run: |
        docker run -d -p 5000:5000 --name bookstore-test online-bookstore:latest
        sleep 10
        curl -f http://localhost:5000/ || exit 1
        docker stop bookstore-test
        docker rm bookstore-test
    
    - name: Save Docker image
      run: |
        docker save online-bookstore:latest | gzip > online-bookstore.tar.gz
    
    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: online-bookstore.tar.gz

  # Security Scanning
  security:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to Staging
  deploy-staging:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download Docker image
      uses: actions/download-artifact@v4
      with:
        name: docker-image
    
    - name: Load Docker image
      run: |
        docker load < online-bookstore.tar.gz
    
    - name: Deploy to staging
      run: |
        echo "🚀 Deploying Online Bookstore to staging environment..."
        echo "Application version: ${{ github.sha }}"
        # Add your staging deployment commands here
        # Example: kubectl apply -f k8s/staging/
        # Example: docker-compose -f docker-compose.staging.yml up -d
    
    - name: Run smoke tests on staging
      run: |
        echo "🧪 Running smoke tests on staging..."
        # Add staging smoke test commands here
        # curl -f https://staging-bookstore.pythonanywhere.com/
    
    - name: Run integration tests on staging
      run: |
        echo "🔗 Running integration tests on staging environment..."
        # You can run your test suite against staging here
        # python -m pytest test_integration.py --base-url=https://staging-bookstore.pythonanywhere.com

  # Deploy to Production
  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download Docker image
      uses: actions/download-artifact@v4
      with:
        name: docker-image
    
    - name: Load Docker image
      run: |
        docker load < online-bookstore.tar.gz
    
    - name: Deploy to production
      run: |
        echo "🚀 Deploying Online Bookstore to production environment..."
        echo "Application version: ${{ github.sha }}"
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s/production/
        # Example: docker-compose -f docker-compose.prod.yml up -d
    
    - name: Run post-deployment verification
      run: |
        echo "✅ Running post-deployment verification..."
        # Add production verification commands here
        # curl -f https://shahsadruddin2009.pythonanywhere.com/
    
    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## Online Bookstore Release v${{ github.run_number }}
          
          ### Changes in this release:
          - Deployed commit: ${{ github.sha }}
          - All tests passed ✅
          - Security scans completed ✅
          - Successfully deployed to production 🚀
          
          ### Test Results:
          - Model tests: ✅
          - Route tests: ✅ 
          - Category tests: ✅
          - Integration tests: ✅
        draft: false
        prerelease: false

  # Notification
  notify:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "🎉 Online Bookstore successfully deployed to production!"
          echo "Version: ${{ github.sha }}"
          echo "All tests passed and application is live!"
        else
          echo "❌ Deployment failed. Please check the logs."
        fi
